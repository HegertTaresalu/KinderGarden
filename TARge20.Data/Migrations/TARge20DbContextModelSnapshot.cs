// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TARge20.Data;

namespace TARge20.Data.Migrations
{
    [DbContext(typeof(TARge20DbContext))]
    partial class TARge20DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TARge20.Core.Domain.Absent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("KindergartenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KindergartenId");

                    b.ToTable("Absents");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StayingSince")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("KindergartenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkedSince")
                        .HasColumnType("int");

                    b.Property<int>("WorkedUntil")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KindergartenId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FreeSpace")
                        .HasColumnType("int");

                    b.Property<string>("GroupLeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TARge20.Core.Domain.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Division")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Kindergarten", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Kindergartens");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Kitchen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Menu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Kitchens");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Breakfast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KitchenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lunch")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KitchenId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("KindergartenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QueueLength")
                        .HasColumnType("int");

                    b.Property<int>("QueuePriority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KindergartenId");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Absent", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Kindergarten", null)
                        .WithMany("Absents")
                        .HasForeignKey("KindergartenId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Child", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Queue", null)
                        .WithMany("Child")
                        .HasForeignKey("QueueId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Employee", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Kindergarten", null)
                        .WithMany("Employee")
                        .HasForeignKey("KindergartenId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Group", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Child", null)
                        .WithMany("Group")
                        .HasForeignKey("ChildId");

                    b.HasOne("TARge20.Core.Domain.Employee", null)
                        .WithMany("Group")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.JobTitle", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Employee", null)
                        .WithMany("Jobtitle")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Kitchen", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Employee", null)
                        .WithMany("Kitchen")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Menu", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Kitchen", null)
                        .WithMany("Menus")
                        .HasForeignKey("KitchenId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Parent", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Child", null)
                        .WithMany("Parent")
                        .HasForeignKey("ChildId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Queue", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Kindergarten", null)
                        .WithMany("queues")
                        .HasForeignKey("KindergartenId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Child", b =>
                {
                    b.Navigation("Group");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Employee", b =>
                {
                    b.Navigation("Group");

                    b.Navigation("Jobtitle");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Kindergarten", b =>
                {
                    b.Navigation("Absents");

                    b.Navigation("Employee");

                    b.Navigation("queues");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Kitchen", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Queue", b =>
                {
                    b.Navigation("Child");
                });
#pragma warning restore 612, 618
        }
    }
}
